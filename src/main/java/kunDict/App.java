/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package kunDict;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.BatchUpdateException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Properties;
import java.util.InvalidPropertiesFormatException;

// TODO: change frequency data type to ArrayList <19-11-20, gk07> //
// TODO: Instaed registerDict() of database native trigger <27-10-20, gk07> //
// TODO: change database table, unqie(word_id, word_source) <30-09-20, gk07> //
// TODO: change database frequencies table, add column fre_explain <04-10-20, gk07> //
// TODO: cli <27-09-20, gk07> //
// TODO: tui <27-09-20, gk07> //
// TODO: mit word list dictionary <27-09-20, gk07> //
// TODO: migration to sqlite dbms <27-09-20, gk07> //
// TODO: convert to anki <27-09-20, gk07> //
// TODO: add more online dictionarys <29-09-20, gk07> //
// TODO: add more update methods for operate class Word fields <30-09-20, gk07> //
// TODO: add api <29-10-20, gk07> //

public class App {
    public static Database db;
    public static Properties configs;
    public static String homeDir = System.getProperty("user.home");
    private String configFileName = homeDir + "/.config/kunDict/default.conf";
    private ArrayList<LocalDict> registeredLocalDicts = new ArrayList<>();
    private ArrayList<OnlineDict> registeredOnlineDicts = new ArrayList<>();
    private String tablesPreffix = "dict";
    private boolean autoRestoreWord;

    public App() throws IOException, SQLException {
        this.loadConfigs();
        App.db = new Database();
        this.registerDicts();
    }

    // load configs {{{ //
    private void loadConfigs() throws FileNotFoundException, IOException,
            InvalidPropertiesFormatException {
        App.configs = new Properties();
        FileInputStream fis = new FileInputStream(this.configFileName);
        App.configs.load(fis);
        fis.close();

        Utils.config("Loaded the following configs:");
        Utils.config("config file: " + this.configFileName);
        for(String option : App.configs.stringPropertyNames()) {
            Utils.config(option + ": " + App.configs.getProperty(option));
        }

        this.autoRestoreWord = Utils.testString(
                App.configs.getProperty("autoRestoreWord"));
    }
    // }}} load configs //

    // getter and setter {{{ //
    public String getConfigFileName() {
        return this.configFileName;
    }

    public boolean getAutoRestoreWord() {
        return this.autoRestoreWord;
    }

    public void setConfigFileName(String configFileName) {
        this.configFileName = configFileName;
    }

    public void setAutoRestoreWord(boolean autoRestoreWord) {
        this.autoRestoreWord = autoRestoreWord;
    }

    public ArrayList<Dict> getRegisteredDicts() {
        ArrayList<Dict> dicts = new ArrayList<>();
        for (LocalDict localDict : this.registeredLocalDicts) {
            if (localDict instanceof Dict) {
                dicts.add((Dict) localDict);
            }
        }

        for (OnlineDict onlineDict : this.registeredOnlineDicts) {
            if (onlineDict instanceof Dict) {
                dicts.add((Dict) onlineDict);
            }
        }

        return dicts;
    }

    public ArrayList<LocalDict> getRegisteredLocalDicts() {
        return this.registeredLocalDicts;
    }

    public ArrayList<OnlineDict> getRegisteredOnlineDicts() {
        return this.registeredOnlineDicts;
    }

    // }}} getter and setter //

    // initialize app tables {{{ //
    public void initializeTables() throws IOException, SQLException {
        db.getConnection();
        db.createDatabase();
        db.useDbName();

        if (!hasTables()) {
            db.createTable(SQLStr.createTableDicts());
            db.createTable(SQLStr.createTableDictTypes());
            db.addForeignKey(SQLStr.addForeignKeyDictTypeId());
            this.insertValuesIntoDictTypes();
        }

        Utils.info("APP INITED");
    }

    public boolean hasTables() throws IOException, SQLException {
        Boolean result = false;
        Connection con = db.getCurrentConUseDbName();

        try (Statement stmt = con.createStatement();) {
            String query = SQLStr.hasTables(this.tablesPreffix);

            // process the ResultSet {{{ //
            ResultSet rs = stmt.executeQuery(query);
            ArrayList<String> existedTables = new ArrayList<>();
            ArrayList<String> designedTables = new ArrayList<>(
                    Arrays.asList(SQLStr.tableListApp));
            while (rs.next()) {
                existedTables.add(rs.getString(1));
            }

            result = existedTables.containsAll(designedTables);

        } catch (SQLException e) {
            Database.printSQLException(e);
        }
        if (result) {
            Utils.info("App tables existed");
        } else {
            Utils.info("App tables NOT existed");
        }

        return result;
        // }}} process the ResultSet //
    }

    public void insertValuesIntoDictTypes() throws SQLException {
        Connection con = db.getCurrentConUseDbName();
        try (Statement stmt = con.createStatement()) {
            con.setAutoCommit(false);
            for (DictType e : DictType.values()) {
                stmt.addBatch(SQLStr.insertValueIntoDictTypes(e.toString()));
            }
            stmt.executeBatch();
            con.commit();
            Utils.info("Inerted values of dict_types table");
        } catch (BatchUpdateException e) {
            Database.printSQLException(e);
        } catch (SQLException e) {
            Database.printSQLException(e);
        } finally {
            con.setAutoCommit(true);
        }
    }
    // }}} initialize app tables //

    // TODO: check app database status <21-09-20, gk07> //
    // public boolean checkForeignKey(){}
    // public boolean checkTableValuse(){}

    public void registerDicts() throws IOException, SQLException {
        DefaultLocalDict defaultDict = new DefaultLocalDict();
        CollinsOnlineDict collinsDict = new CollinsOnlineDict();
        LongmanOnlineDict longmanDict = new LongmanOnlineDict();

        this.clearRegisteredDicts();

        this.registerDict(defaultDict);
        this.registerDict(longmanDict);
        this.registerDict(collinsDict);
    }

    public void printWords(ArrayList<Word> words) {
        if (words.size() > 0) {
            for (Word word : words) {
                if (word != null && !word.isEmypty()) {
                    Formatter fmt = new Formatter(word);
                    fmt.printColorText();
                }
            }
        } else {
            Utils.warning("Can't find anything");
        }
    }

    public void printWord(Word word) {
        if (word != null && !word.isEmypty()) {
            Formatter fmt = new Formatter(word);
            fmt.printColorText();
        } else {
            Utils.warning("Can't find anything");
        }
    }

    public Word queryWordByFirst(String wordSpell) throws SQLException {
        Word word = null;
        String hitedDict = null;
        LocalDict defaultDict = this.getRegisteredLocalDicts().get(0);

        ArrayList<Dict> registeredDicts = this.getRegisteredDicts();
        Utils.info("There are " + registeredDicts.size()
                + " registered dictionarys");
        Utils.debug("RegisteredDicts: " + registeredDicts);

        for (Dict dict : registeredDicts) {
            Utils.info(String.format("Searching (%s) in dictionary {%s}",
                    wordSpell, dict.getName()));
            ArrayList<Word> words = dict.queryWordBySpell(wordSpell);
            for (Word w : words) {
                if (w != null && !w.isEmypty()) {
                    word = w;
                    hitedDict = dict.getName();

                    Utils.info("==> Get result from " + hitedDict);
                    if (this.autoRestoreWord
                            && !hitedDict.equals(defaultDict.getName())) {
                        defaultDict.addWord(word);
                    }
                    break;
                }
            }
            if (word != null && !word.isEmypty()) {
                break;
            }
        }

        return word;
    }

    public ArrayList<Word> queryWordAll(String wordSpell) throws SQLException {
        ArrayList<Word> words = new ArrayList<>();
        String hitedDict = null;
        LocalDict defaultDict = this.getRegisteredLocalDicts().get(0);

        ArrayList<Dict> registeredDicts = this.getRegisteredDicts();
        Utils.info("There are " + registeredDicts.size()
                + " registered dictionarys");
        Utils.debug("RegisteredDicts: " + registeredDicts);

        for (Dict dict : registeredDicts) {
            Utils.info(String.format("Searching (%s) in dictionary {%s}",
                    wordSpell, dict.getName()));
            ArrayList<Word> wordsTemp = dict.queryWordBySpell(wordSpell);
            Utils.warning(String.format("Get %d word from {%s}",
                    wordsTemp.size(), dict.getName()));
            for (Word word : wordsTemp) {
                if (word != null && !word.isEmypty()) {
                    hitedDict = dict.getName();

                    Utils.info("==> Get result from " + hitedDict);
                    if (this.autoRestoreWord &&
                            !hitedDict.equals(defaultDict.getName())) {
                        defaultDict.addWord(word);
                    }
                }
            }
            words.addAll(wordsTemp);
        }

        return words;
    }

    public ArrayList<Word> queryWordLocal(String wordSpell)
            throws SQLException {
        ArrayList<Word> words = new ArrayList<>();
        String hitedDict = null;
        ArrayList<LocalDict> localDicts = this.getRegisteredLocalDicts();

        Utils.info("There are " + localDicts.size()
                + " registered local dictionarys");
        Utils.debug("Registered localDicts: " + localDicts);
        for (LocalDict dict : localDicts) {
            Utils.info(String.format("Searching (%s) in dictionary {%s}",
                    wordSpell, dict.getName()));
            ArrayList<Word> wordsTemp = dict.queryWordBySpell(wordSpell);
            Utils.warning(String.format("Get %d word from {%s}",
                    wordsTemp.size(), dict.getName()));
            for (Word word : wordsTemp) {
                if (word != null && !word.isEmypty()) {
                    hitedDict = dict.getName();
                    Utils.info("==> Get result from " + hitedDict);
                }
            }
            words.addAll(wordsTemp);
        }

        return words;
    }

    public ArrayList<Word> queryWordOnline(String wordSpell)
            throws SQLException {
        ArrayList<Word> words = new ArrayList<>();
        String hitedDict = null;
        ArrayList<OnlineDict> onlineDicts = this.getRegisteredOnlineDicts();
        LocalDict defaultDict = this.getRegisteredLocalDicts().get(0);

        Utils.info("There are " + onlineDicts.size()
                + " registered online dictionarys");
        Utils.debug("Registered onlineDicts: " + onlineDicts);
        for (OnlineDict dict : onlineDicts) {
            Utils.info(String.format("Searching (%s) in dictionary {%s}",
                    wordSpell, dict.getName()));
            ArrayList<Word> wordsTemp = dict.queryWordBySpell(wordSpell);
            Utils.warning(String.format("Get %d word from {%s}",
                    wordsTemp.size(), dict.getName()));
            for (Word word : wordsTemp) {
                if (word != null && !word.isEmypty()) {
                    hitedDict = dict.getName();
                    Utils.info("==> Get result from " + hitedDict);
                    if (this.autoRestoreWord &&
                            !hitedDict.equals(defaultDict.getName())) {
                        defaultDict.addWord(word);
                    }
                }
            }
            words.addAll(wordsTemp);
        }

        return words;
    }

    public void queryWordLocalWrapper(String... args) throws SQLException {
        if (args != null && args.length > 0) {
            String wordSpell = Dict.preProcessWordSpell(String.join(" ", args));
            ArrayList<Word> words = queryWordLocal(wordSpell);
            printWords(words);
        } else {
            Utils.warning("Nothing is inputed");
        }
    }

    public void queryWordOnlineWrapper(String... args) throws SQLException {
        if (args != null && args.length > 0) {
            String wordSpell = Dict.preProcessWordSpell(String.join(" ", args));
            ArrayList<Word> words = queryWordOnline(wordSpell);
            printWords(words);
        } else {
            Utils.warning("Nothing is inputed");
        }
    }

    public void queryWordAllWrapper(String... args) throws SQLException {
        if (args != null && args.length > 0) {
            String wordSpell = Dict.preProcessWordSpell(String.join(" ", args));
            ArrayList<Word> words = queryWordAll(wordSpell);
            printWords(words);
        } else {
            Utils.warning("Nothing is inputed");
        }
    }

    public void queryWordByFirstWrapper(String... args) throws SQLException {
        if (args != null && args.length > 0) {
            String wordSpell = Dict.preProcessWordSpell(String.join(" ", args));
            Word word = queryWordByFirst(wordSpell);
            printWord(word);
        } else {
            Utils.warning("Nothing is inputed");
        }
    }

    public void queryWordLocalFirstWrapper(String... args) throws SQLException {
        if (args != null && args.length > 0) {
            String wordSpell = Dict.preProcessWordSpell(String.join(" ", args));
            ArrayList<Word> words = queryWordLocal(wordSpell);
            if(words.size() == 0) {
                words = queryWordOnline(wordSpell);
            }
            printWords(words);
        } else {
            Utils.warning("Nothing is inputed");
        }
    }

    // register dict {{{ //
    /**
     * registerDict insert the name, shortName, dict_type_id, dict_size, dict_mtime,
     * dict_atime of a register dict into table(dicts) If the size of dict is less
     * than 0, express that dict is DictType.Online This method is implemented by
     * transaction. It's not elegant. The better way is database native trigger.
     */
    // TODO: Instaed registerDict() of database native trigger <27-10-20, gk07> //
    public void registerDict(Dict dict) throws SQLException {
        LocalDict localDict = null;
        String name = dict.getName();
        String shortName = dict.getShortName();
        DictType type = dict.getType();
        int size = (type.equals(DictType.Local)) ? 0 : -1;
        Connection con = db.getCurrentConUseDbName();
        PreparedStatement pstmtDicts = null;
        Statement stmt = null;
        ResultSet rs = null;
        int affectedRow = 0;
        int dictTypeId = 0;

        if (type.equals(DictType.Local)) {
            localDict = (LocalDict) dict;
            size = localDict.size();
            if (!this.registeredLocalDicts.contains(localDict)) {
                this.registeredLocalDicts.add(localDict);
            }
        } else {
            OnlineDict onlineDict = (OnlineDict) dict;
            if (!this.registeredOnlineDicts.contains(onlineDict)) {
                this.registeredOnlineDicts.add(onlineDict);
            }
        }

        try {
            con.setAutoCommit(false);
            stmt = con.createStatement();
            pstmtDicts = con.prepareStatement(SQLStr.insertValueIntoDicts(),
                    Statement.RETURN_GENERATED_KEYS);
            rs = stmt.executeQuery(SQLStr.queryDictTypeId(type.toString()));

            if (rs != null && !rs.isClosed() && rs.next()) {
                dictTypeId = rs.getInt(1);
                rs.close();
                Utils.debug("Get dict_type_id: " + dictTypeId);
            }

            if (dictTypeId > 0) {
                pstmtDicts.setString(1, name);
                pstmtDicts.setString(2, shortName);
                pstmtDicts.setInt(3, dictTypeId);
                pstmtDicts.setInt(4, size);
            }
            affectedRow = pstmtDicts.executeUpdate();
            rs = pstmtDicts.getGeneratedKeys();
            if (affectedRow == 1) {
                Utils.info("Registered a dictionary {" + name
                        + "} to App database");
            }

        } catch (SQLException e) {
            if (e.getErrorCode() == SQLStr.ERRORCODE_DUPLICATE_ENTRY) {
                Utils.warning("Duplicated dictionary, please try check.");
            }

            Database.printSQLException(e);
        } finally {
            if (rs != null)
                rs.close();
            if (pstmtDicts != null) {
                pstmtDicts.close();
            }
            if (stmt != null) {
                stmt.close();
            }
            if (con != null)
                con.setAutoCommit(true);
        }
    }

    public void clearRegisteredDicts() throws SQLException {
        Connection con = db.getCurrentConUseDbName();

        try (Statement stmt = con.createStatement();) {
            int affectedRow = stmt.executeUpdate(SQLStr.clearDicts());
            if (affectedRow > 0) {
                Utils.info("Cleared dicts table");
            } else if (affectedRow == 0) {
                Utils.info("Don't need clear, dicts tables is empty");
            } else {
                Utils.warning("Failed to clear dicts table");
            }
        } catch (SQLException e) {
            Utils.warning("Failed to clear dicts table");
            Database.printSQLException(e);
        }

        this.registeredLocalDicts.clear();
        this.registeredOnlineDicts.clear();
    }
    // }}} register dict //

    public static void main(String... args) throws IOException, SQLException {
        App app = new App();
        // app.queryWordAllWrapper(args);
        // app.queryWordByFirstWrapper(args);
        // app.queryWordLocalWrapper(args);
        // app.queryWordOnlineWrapper(args);
        app.queryWordLocalFirstWrapper(args);
    }
}
