/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package kunDict;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import java.net.http.HttpResponse;
import java.nio.file.Paths;
import java.nio.file.Path;
import java.nio.file.Files;
import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;

public class AppTest {
    @Ignore
    @Test
    public void testAppHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull("app should have a greeting",
                classUnderTest.getGreeting());
    }

    @Ignore
    @Test
    public void testRequest() {
        String url = "https://www.collinsdictionary.com/us/dictionary/english/water";
        String fileName = "water.html";
        Request req = new Request(url);
        req.bodyHandler = HttpResponse.BodyHandlers
                .ofFile(Paths.get(fileName));
        HttpResponse<String> response = req.get();

        // System.out.println(response.body().substring(0, 500));
        assertEquals(200, response.statusCode());
        assertNotNull("request should get response", response);
    }

    @Ignore
    @Test
    public void testCollinsExtracotr() throws IOException {
        String fileName = "water.html";
        String html = Files.readString(Path.of(fileName));
        Extractor extractor = new Extractor(html);
        Word water = extractor.collinsOnline();
        // System.out.println(water);
        // System.out.println(water.getSpell());
        // System.out.println(water.getPronounce());
        // System.out.println(water.getFrequency());
        assertNotNull("water should be a Word class type", water);
        assertEquals("should be water", "water", water.getSpell());
        assertEquals("frequency should be 5", "frequency band: 5",
                water.getFrequency().toString());
        assertEquals("sensEntryList size should be 5", 5,
                water.getSenesEntries().size());
        assertNotNull("sensEntryList should not Null", water.getSenesEntries());
    }

    @Test
    public void testCollinsQuery() throws IOException {
        CollinsOnlineDict collins = new CollinsOnlineDict();
        assertEquals("Should get name of dictionary",
                "Collins Online English Dictionary", collins.getName());

        Word water = collins.query("water");
        Formatter fwater = new Formatter(water);
        fwater.printText();

        Word duplicate = collins.query("duplicate");
        Formatter fduplicate = new Formatter(duplicate);
        fduplicate.printText();

        Word polymorphism = collins.query("polymorphism");
        Formatter fpolymorphism = new Formatter(polymorphism);
        fpolymorphism.printText();

        Word casual = collins.query("casual");
        Formatter fcasual = new Formatter(casual);
        fcasual.printText();

        Word hibernate = collins.query("hibernate");
        Formatter fhibernate = new Formatter(hibernate);
        fhibernate.printText();

        Word hypothesis = collins.query("hypothesis");
        Formatter fhypothesis = new Formatter(hypothesis);
        fhypothesis.printText();

        Word test = collins.query("test");
        Formatter ftest = new Formatter(test);
        ftest.printText();

        Word thes = collins.query("thes");
        Formatter fthes = new Formatter(thes);
        fthes.printText();

        Word ace = collins.query("ace");
        Formatter face = new Formatter(ace);
        face.printText();

        // System.out.println(water);
        // assertNotNull("water should be a Word class type", water);
        // assertEquals("should be water", "water", water.getSpell());
        // assertEquals("frequency should be 5", "frequency band: 5",
        //         water.getFrequency().toString());
        // assertEquals("sensEntryList size should be 5", 5,
        //         water.getSenesEntries().size());
        // assertNotNull("sensEntryList should not Null", water.getSenesEntries());
    }

    @Ignore
    @Test
    public void testDatabaseSetProperties() throws IOException {
        Database db = new Database();
        assertNotNull("db should be a instance of class Database", db);
    }

    @Ignore
    @Test
    public void testDatabaseGetConnection() throws IOException, SQLException {
        String dbName = "mit_10k_dict";
        Database db = new Database(dbName);
        Connection con = db.getConnection();
        assertNotNull("con should be a instance of class Connection", con);
        Database.closeConnection(con);
        assertTrue(con.isClosed());
    }

    @Ignore
    @Test
    public void testMITDictQuery() throws IOException, SQLException {
        MITDict mitDict = new MITDict();

        String word = "water";
        Word wordLocal = mitDict.query(word);
        // System.out.println(wordLocal);
        // assertNotNull("water should be a instance of class Word", wordLocal);
        CollinsOnlineDict collins = new CollinsOnlineDict();
        Word wordCollins = collins.query(word);
        // assertNotNull("water should be a instance of class Word", wordLocal);
        // assertEquals("results local and collins of query should equal.", wordCollins, wordLocal);
        assertEquals(wordLocal.getSenesEntries(), wordCollins.getSenesEntries());
        assertEquals(wordLocal.getSpell(), wordCollins.getSpell());
        assertEquals(wordLocal.getForms(), wordCollins.getForms());
        assertEquals(wordLocal.getFrequency(), wordCollins.getFrequency());
        // assertEquals(wordLocal.getPronounce(), wordCollins.getPronounce());
        assertEquals(wordLocal.getSenesEntries(), wordCollins.getSenesEntries());
        assertEquals(wordLocal.getSource(), wordCollins.getSource());
        System.out.println("database: " + wordLocal.getPronounce().getSound());
        System.out.println("online: " + wordCollins.getPronounce().getSound());
    }
}
